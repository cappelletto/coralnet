# Generated by Django 4.2.16 on 2025-06-29 09:21

from django.conf import settings
from django.db import migrations
from tqdm import tqdm


UPDATE_BATCH_SIZE = 1000


def populate_metadata_image(apps, schema_editor):
    """
    Populate the Metadata model's image_new field using the Image.metadata
    value.
    """
    Image = apps.get_model('images', 'Image')
    Metadata = apps.get_model('images', 'Metadata')

    all_images = (
        Image.objects.all()
        .select_related('metadata')
        # iterator() helps to not run out of memory with lots of images
        # (like millions).
        .iterator(chunk_size=10000))
    metadata_batch = []

    for image in tqdm(all_images, disable=settings.TQDM_DISABLE):
        if not image.metadata:
            continue

        image.metadata.image_new = image
        metadata_batch.append(image.metadata)
        if len(metadata_batch) >= UPDATE_BATCH_SIZE:
            # bulk_update() when we've gathered
            # UPDATE_BATCH_SIZE metadata instances.
            Metadata.objects.bulk_update(metadata_batch, ['image_new'])
            metadata_batch = []

    # Last batch.
    Metadata.objects.bulk_update(metadata_batch, ['image_new'])


def populate_image_metadata(apps, schema_editor):
    """
    Populate the Image model's metadata field using the Metadata.image_new
    value (reverse relation is metadata_new).
    """
    Image = apps.get_model('images', 'Image')

    all_images = (
        Image.objects.all()
        .select_related('metadata_new')
        .iterator(chunk_size=10000))
    image_batch = []

    for image in tqdm(all_images, disable=settings.TQDM_DISABLE):
        if not image.metadata_new:
            continue

        image.metadata = image.metadata_new
        image_batch.append(image)
        if len(image_batch) >= UPDATE_BATCH_SIZE:
            Image.objects.bulk_update(image_batch, ['metadata'])
            image_batch = []

    # Last batch.
    Image.objects.bulk_update(image_batch, ['metadata'])


class Migration(migrations.Migration):

    dependencies = [
        ('images', '0041_metadata_image_onetoone_schema1'),
    ]

    operations = [
        migrations.RunPython(
            populate_metadata_image, populate_image_metadata, elidable=True),
    ]
