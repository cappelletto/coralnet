# Generated by Django 4.2.16 on 2025-07-09 21:11

import posixpath

from django.db import migrations


def rename_dupe_image_names(apps, schema_editor):
    """
    If multiple images in a source share the same name, add name suffixes
    to each of those images so that (1) they end up having different names,
    and (2) the source owner can more easily find the dupe names.
    """
    format_str = '{original_name}__dupe-name-{number:02d}{extension}'

    Source = apps.get_model('sources', 'Source')
    Metadata = apps.get_model('images', 'Metadata')

    for source in Source.objects.all():
        metadatas = Metadata.objects.filter(source=source)
        names = list(
            metadatas.values_list('name', flat=True)
        )
        seen_names = set()
        dupe_names = set()
        for name in names:
            # Case insensitive when considering dupes.
            name_lower = name.lower()
            if name_lower in seen_names:
                dupe_names.add(name_lower)
            seen_names.add(name_lower)

        if dupe_names:
            input_text = input(
                f"Dupe names found in source {source.pk}: {dupe_names}"
                f" Suffixes will be added to make unique names. OK? [y/N]: "
            )
            if input_text.lower() != 'y':
                raise RuntimeError("Migration aborted.")

        for name in dupe_names:
            # Case insensitive
            dupe_metadatas = metadatas.filter(name__iexact=name).order_by('pk')

            for number, metadata in enumerate(dupe_metadatas, 1):
                original_name_without_ext, extension = (
                    posixpath.splitext(metadata.name))
                metadata.name = format_str.format(
                    original_name=original_name_without_ext,
                    number=number,
                    extension=extension,
                )
                metadata.save()


def remove_dupe_name_suffixes(apps, schema_editor):
    """
    If a dupe-name suffix is found in an image name, remove that suffix.
    """
    Metadata = apps.get_model('images', 'Metadata')
    metadatas = Metadata.objects.filter(name__contains='__dupe-name-')
    for metadata in metadatas:
        current_name_without_ext, extension = posixpath.splitext(metadata.name)
        # Cut off the part from __dupe-name- and after
        reverted_name_without_ext = current_name_without_ext[
            :current_name_without_ext.index('__dupe-name-')]
        reverted_name = reverted_name_without_ext + extension
        metadata.name = reverted_name
        metadata.save()


class Migration(migrations.Migration):

    dependencies = [
        ('images', '0049_metadata_aux_and_name_indexes'),
    ]

    operations = [
        migrations.RunPython(
            rename_dupe_image_names, remove_dupe_name_suffixes),
    ]
