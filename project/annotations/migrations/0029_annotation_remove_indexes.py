# Generated by Django 4.2.16 on 2025-06-17 05:29

from django.db import migrations
from django.db.models import Index


def remove_indexes(apps, schema_editor):
    Annotation = apps.get_model('annotations', 'Annotation')

    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "SELECT indexname, indexdef FROM pg_indexes"
            " WHERE tablename = 'annotations_annotation';")
        results = cursor.fetchall()

    # The foreign-key fields that we expect to find a single-column
    # non-unique index of and want to remove that index.
    #
    # We don't want to remove Annotation's own unique primary key
    # index, and the unique foreign key to Point.
    # However, a non-unique foreign key to Point may erroneously
    # still be sitting there unused (it was in production).
    target_fkeys = [
        'image',
        'label',
        'point',
        'robot_version',
        'source',
        'user',
    ]

    for indexname, indexdef in results:
        if not indexdef.startswith("CREATE INDEX "):
            # Perhaps a CREATE UNIQUE INDEX, which we don't want to remove.
            continue

        for fkey_name in target_fkeys:
            if not indexdef.endswith(f'btree ({fkey_name}_id)'):
                # Not this foreign key; check for the next one.
                continue

            # This is a target index.

            # Because we haven't used Meta.indexes for Annotation
            # before, the existing indexes don't seem to be in the
            # migrations' model state.
            # So it seems that we can't get Index instances in
            # such a way that involves model state.
            # Instantiating directly like this seems OK.
            index = Index(fields=(fkey_name,), name=indexname)

            schema_editor.remove_index(Annotation, index)

            # Move onto the next found index.
            break


class Migration(migrations.Migration):
    """
    Django 1.11 introduced better migration support for indexes.
    https://docs.djangoproject.com/en/5.2/releases/1.11/#class-based-model-indexes
    And this seems to have included making consistent names for the
    indexes across environments.

    But at this point, with some of the Annotation table's indexes
    potentially being created before 2019 (when we updated to
    Django 1.11+), those index names could easily be different
    between environments.

    And now we want to replace most of the existing indexes with new
    ones.
    So we have to figure out what the existing index names are that we
    want to replace. So, that's what this migration does, followed by
    removing those indexes. The next migration adds the new indexes.
    """

    dependencies = [
        ('annotations', '0028_annotationuploadevent'),
    ]

    operations = [
        migrations.RunPython(remove_indexes, migrations.RunPython.noop),
    ]
